// Place your key bindings in this file to override the defaults
[
    // This is an attempt to unify my Linux and Windows editor environments.
    // OSX is _not_ included in this list.
    // VSCode parses `cmd`, `meta`, and `win` interchangeably. They all refer to
    // the current OS's specific meta key; "Super" on linux, "Windows" on
    // Windows, and "Cmd" on OSX. Because OSX (rightly?) chose to make heavier
    // use of Cmd in user applications, I don't consider it reasonable to unify
    // OSX with the other platforms.

    /// Navigate Tabs Spatially (not LRU)
    { "key": "ctrl+tab",        "command": "workbench.action.nextEditor" },
    { "key": "ctrl+shift+tab",  "command": "workbench.action.previousEditor" },
    { "key": "ctrl+pagedown",   "command": "workbench.action.nextEditor" },
    { "key": "ctrl+pageup",     "command": "workbench.action.previousEditor" },

    { "key": "ctrl+tab",        "command": "-workbench.action.openNextRecentlyUsedEditorInGroup" },
    { "key": "ctrl+shift+tab",  "command": "-workbench.action.openPreviousRecentlyUsedEditorInGroup" },

    /// Subword Navigation
    { "key": "alt+right",       "command": "cursorWordPartRight",
                                "when": "textInputFocus" },
    { "key": "shift+alt+right", "command": "cursorWordPartRightSelect",
                                "when": "textInputFocus" },
    { "key": "alt+left",        "command": "cursorWordPartStartLeft",
                                "when": "textInputFocus" },
    { "key": "shift+alt+left",  "command": "cursorWordPartStartLeftSelect",
                                "when": "textInputFocus" },
    { "key": "alt+backspace",   "command": "deleteWordPartLeft",
                                "when": "textInputFocus && !editorReadonly" },

    /// Rebind Trigger Suggest & the Suggest Widget
    /// ctrl+space is eaten by my quake editor, gotta rejigger.
    { "key": "shift+tab",        "command": "editor.action.triggerSuggest",
                                    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
    { "key": "alt+escape",       "command": "editor.action.triggerSuggest",
                                    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
    { "key": "shift+tab",        "command": "toggleSuggestionDetails",
                                    "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "alt+escape",       "command": "toggleSuggestionDetails",
                                    "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "shift+alt+tab",    "command": "toggleSuggestionFocus",
                                    "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "shift+alt+escape", "command": "toggleSuggestionFocus",
                                    "when": "suggestWidgetVisible && textInputFocus" },

    { "key": "ctrl+space",       "command": "-editor.action.triggerSuggest",
                                    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
    { "key": "ctrl+space",       "command": "-toggleSuggestionDetails",
                                    "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+alt+space",   "command": "-toggleSuggestionFocus",
                                    "when": "suggestWidgetVisible && textInputFocus" },

    { "key": "shift+tab",        "command": "-outdent",
                                    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    // { "key": "shift+tab",        "command": "-insertPrevSuggestion",
    //                                 "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },

    { "key": "ctrl+k ctrl+tab",  "command": "editor.action.triggerParameterHints",
                                    "when": "editorHasSignatureHelpProvider && editorTextFocus" },
    { "key": "ctrl+shift+space", "command": "-editor.action.triggerParameterHints",
                                    "when": "editorHasSignatureHelpProvider && editorTextFocus" },

    /// Normalize Cursor Inserts
    /// Each platform got its own defaults for... reasons?
    // Normalize on *nix...
    { "key": "ctrl+shift+up",   "command": "editor.action.insertCursorAbove",
                                   "when": "editorTextFocus" },
    { "key": "ctrl+shift+down", "command": "editor.action.insertCursorBelow",
                                   "when": "editorTextFocus" },
    { "key": "shift+alt+up",    "command": "editor.action.insertCursorAbove",
                                   "when": "editorTextFocus" },
    { "key": "shift+alt+down",  "command": "editor.action.insertCursorBelow",
                                   "when": "editorTextFocus" },
    { "key": "shift+alt+i",     "command": "editor.action.insertCursorAtEndOfEachLineSelected",
                                   "when": "editorTextFocus" },

    // Explicitly disable windows
    { "key": "ctrl+alt+up",     "command": "-editor.action.insertCursorAbove",
                                   "when": "editorTextFocus" },
    { "key": "ctrl+alt+down",   "command": "-editor.action.insertCursorBelow",
                                   "when": "editorTextFocus" },
    { "key": "ctrl+shift+up",   "command": "-cursorUpSelect",
                                   "when": "textInputFocus" },
    { "key": "ctrl+shift+down", "command": "-cursorDownSelect",
                                   "when": "textInputFocus" },

    /// Some Sublime Keybindings
    /// `splitIntoLines` requires the Sublime Commands extension. That extension
    /// also provides older versions of `expandLineSelection` (`expandToLine`),
    /// `transpose`, and `joinLines`. I'm using the first-party implementation.
    ///     code --install-extension zarel.sublime-commands
    { "key": "ctrl+j",       "command": "editor.action.joinLines",
                             "when": "textInputFocus && !editorReadonly" },
    { "key": "ctrl+l",       "command": "expandLineSelection",
                             "when": "textInputFocus" },
    { "key": "ctrl+t",       "command": "editor.action.transpose",
                             "when": "textInputFocus && !editorReadonly" },
    { "key": "ctrl+shift+l", "command": "extension.splitIntoLines",
                             "when": "editorTextFocus"},

    { "key": "ctrl+j",       "command": "-workbench.action.togglePanel" },
    { "key": "ctrl+t",       "command": "-workbench.action.showAllSymbols" }, // TODO: I'd like to re-expose this command...
    { "key": "ctrl+shift+l", "command": "-editor.action.selectHighlights",
                                "when": "editorFocus" },

    /// Block Comments
    { "key": "ctrl+shift+/", "command": "editor.action.blockComment",
                             "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+alt+a",  "command": "-editor.action.blockComment",
                             "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+a", "command": "-editor.action.blockComment",
                             "when": "editorTextFocus && !editorReadonly" },

    /// Cursor Navigation
    /// Also Disable that Damn Workspace Zoom
    { "key": "ctrl+-",       "command": "workbench.action.navigateBack" },
    { "key": "ctrl+shift+-", "command": "workbench.action.navigateForward" },

    { "key": "ctrl+alt+-",   "command": "-workbench.action.navigateBack" },
    { "key": "alt+left",     "command": "-workbench.action.navigateBack" },
    { "key": "alt+right",    "command": "-workbench.action.navigateForward" },

    { "key": "ctrl+-",       "command": "-workbench.action.zoomOut" },
    { "key": "ctrl+=",       "command": "-workbench.action.zoomIn" },
    { "key": "ctrl+shift+-", "command": "-workbench.action.zoomOut" },
    { "key": "ctrl+shift+=", "command": "-workbench.action.zoomIn" },

    /// Vim-ish Go-to-Line
    { "key": "ctrl+;", "command": "workbench.action.gotoLine" },
    { "key": "ctrl+g", "command": "-workbench.action.gotoLine" },

    /// Searching Helpers and Hotkeys
    { "key": "ctrl+alt+g",    "command": "editor.action.selectHighlights",
                                 "when": "editorFocus" },
    { "key": "ctrl+alt+g",    "command": "addCursorsAtSearchResults",
                                 "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "ctrl+g",        "command": "editor.action.nextSelectionMatchFindAction",
                                 "when": "editorFocus" },
    { "key": "ctrl+shift+g",  "command": "editor.action.previousSelectionMatchFindAction",
                                 "when": "editorFocus" },
    // { "key": "ctrl+g",        "command": "editor.action.nextMatchFindAction",
    //                              "when": "editorFocus" },
    // { "key": "ctrl+shift+g",  "command": "editor.action.previousMatchFindAction",
    //                              "when": "editorFocus" },

    { "key": "ctrl+shift+l",  "command": "-editor.action.selectHighlights",
                                 "when": "editorFocus" },
    { "key": "ctrl+shift+l",  "command": "-addCursorsAtSearchResults",
                                 "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "ctrl+g",        "command": "-workbench.action.gotoLine" },
    { "key": "ctrl+shift+g",  "command": "-workbench.view.scm" },

    { "key": "ctrl+k ctrl+g", "command": "workbench.view.scm" }, // TODO: wtf is this?

    /// Show File in Explorer
    { "key": "ctrl+alt+\\", "command": "workbench.files.action.showActiveFileInExplorer" },

    /// Change Case Chords
    /// Requires (one of the) the change-case extions
    ///     code --install-extension wmaurer.change-case
    { "key": "ctrl+' ctrl+u", "command": "extension.changeCase.upper",
                                 "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+' ctrl+i", "command": "extension.changeCase.title",
                                 "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+' ctrl+l", "command": "extension.changeCase.lower",
                                 "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+' ctrl+s", "command": "extension.changeCase.snake",
                                 "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+' ctrl+p", "command": "extension.changeCase.pascal",
                                 "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+' ctrl+c", "command": "extension.changeCase.camel",
                                 "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+' ctrl+k", "command": "extension.changeCase.constant",
                                 "when": "editorTextFocus && !editorReadonly" },

    /// Delete Helper
    { "key": "ctrl+k ctrl+k", "command": "deleteAllRight",
                                 "when": "editorTextFocus && !editorReadonly" },

    // TODO: Consider rebinding these...
    { "key": "ctrl+k ctrl+k", "command": "-editor.action.selectFromAnchorToCursor",
                                 "when": "editorTextFocus && selectionAnchorSet" },
    { "key": "ctrl+k ctrl+b", "command": "-editor.action.setSelectionAnchor",
                                 "when": "editorTextFocus" },

    /// Toggle Minimap
    /// Also, never turn on Tab-Moves-Focus
    { "key": "ctrl+m", "command": "editor.action.toggleMinimap" },
    { "key": "ctrl+m", "command": "-editor.action.toggleTabFocusMode" },

    /// Word Wrap Cycle
    /// Requires the Settings Cycler extension
    ///     code --install-extension hoovercj.vscode-settings-cycler
    {
        "key": "alt+z", "command": "settings.cycle",
        "args": {
            "id": "toggle_word_wrap",
            "overrideWorkspaceSettings": false,
            "values": [
                { "editor.wordWrap": "off",     "[markdown]": { "editor.wordWrap": "off"     } },
                { "editor.wordWrap": "on",      "[markdown]": { "editor.wordWrap": "on"      } },
                { "editor.wordWrap": "bounded", "[markdown]": { "editor.wordWrap": "bounded" } }
            ]
        }
    },
    { "key": "alt+z", "command": "-editor.action.toggleWordWrap" },

    /// Code Lens Toggles
    /// Requires the Settings Cycler extension for the global toggle
    /// Requires the GitLens extension for the... GitLens specific stuff
    ///     code --install-extension hoovercj.vscode-settings-cycler
    ///     code --install-extension eamodio.gitlens
    // Global code lens toggle
    // There isn't a command in vscode for this, so we make our own!
    {
        "key": "alt+x", "command": "settings.cycle",
        "args": {
            "id": "toggle_code_lens",
            "overrideWorkspaceSettings": false,
            "values": [
                { "editor.codeLens": false },
                { "editor.codeLens": true  }
            ]
        }
    },
    { "key": "shift+alt+x", "command": "codelens.showLensesInCurrentLine" },

    /// JQ Hotkey
    /// Requires the vscode-jq extension
    ///     code --install-extension dandric.vscode-jq
    { "key": "alt+j alt+q", "command": "extension.jq",
                            "when": "editorTextFocus" },

    /// Clipbard Ring Overrides
    /// Requires the Clipboard Ring extension
    ///     code --install-extension sirtobi.code-clip-ring
    { "key": "ctrl+shift+v", "command": "clipring.selectAndPasteRingItem",
                                "when": "editorFocus" },

    { "key": "ctrl+shift+v", "command": "-clipring.pasteRingItem",
                                "when": "editorFocus" },
    { "key": "ctrl+shift+v", "command": "-markdown.showPreview",
                                "when": "editorLangId == 'markdown'" },

    /// Reasonable Toggle Bottome Panel
    { "key": "alt+`",  "command": "workbench.action.togglePanel" },
    { "key": "ctrl+j", "command": "-workbench.action.togglePanel" },

    /// Globally Enable Copying File Path
    /// Normally you have to be in the tree view (or another widget?) for these
    /// hotkeys to be active. I want them all the time!
    { "key": "ctrl+k ctrl+c",       "command": "copyFilePath" },
    { "key": "ctrl+k ctrl+shift+c", "command": "copyRelativeFilePath" },
    { "key": "ctrl+k ctrl+c",       "command": "-copyFilePath",
                                       "when": "!editorFocus" },
    { "key": "ctrl+k ctrl+shift+c", "command": "-copyRelativeFilePath",
                                       "when": "!editorFocus" },

    { "key": "ctrl+k ctrl+c",       "command": "-editor.action.addCommentLine",
                                       "when": "editorTextFocus && !editorReadonly" },

    /// Git Lens Overrides
    /// The chord-ing hotkey, ctrl+shift+g, is eaten by my searching shortcuts.
    /// These are default, save for the opening chord. Assumes the setting
    /// `"gitlens.keymap": "none"`.
    /// Requires the Git Lens extension
    ///     code --install-extension eamodio.gitlens

    { "key": "ctrl+alt+z b",       "command": "gitlens.toggleFileBlame",
                                   "when": "editorTextFocus && gitlens:activeFileStatus =~ /blameable/" },
    { "key": "ctrl+alt+z shift+b", "command": "gitlens.toggleCodeLens",
                                   "when": "editorTextFocus && gitlens:canToggleCodeLens && gitlens:enabled" },
    { "key": "ctrl+alt+z -",       "command": "gitlens.showLastQuickPick",
                                   "when": "gitlens:enabled" },
    { "key": "ctrl+alt+z /",       "command": "gitlens.showCommitSearch",
                                   "when": "gitlens:enabled" },
    { "key": "ctrl+alt+z h",       "command": "gitlens.showQuickFileHistory",
                                   "when": "gitlens:enabled" },
    { "key": "ctrl+alt+z shift+h", "command": "gitlens.showQuickRepoHistory",
                                   "when": "gitlens:enabled" },
    { "key": "ctrl+alt+z s",       "command": "gitlens.showQuickRepoStatus",
                                   "when": "gitlens:enabled" },
    { "key": "ctrl+alt+z c",       "command": "gitlens.showQuickCommitFileDetails",
                                   "when": "editorTextFocus && gitlens:enabled" },
    { "key": "ctrl+alt+z .",       "command": "gitlens.diffWithNext",
                                   "when": "editorTextFocus && !isInDiffEditor && gitlens:activeFileStatus =~ /revision/ && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+alt+z .",       "command": "gitlens.diffWithNext",
                                   "when": "editorTextFocus && isInDiffRightEditor && gitlens:activeFileStatus =~ /revision/ && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+alt+z .",       "command": "gitlens.diffWithNextInDiffLeft",
                                   "when": "editorTextFocus && isInDiffLeftEditor && gitlens:activeFileStatus =~ /revision/ && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+alt+z ,",       "command": "gitlens.diffWithPrevious",
                                   "when": "editorTextFocus && !isInDiffEditor && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+alt+z ,",       "command": "gitlens.diffWithPrevious",
                                   "when": "editorTextFocus && isInDiffLeftEditor && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+alt+z ,",       "command": "gitlens.diffWithPreviousInDiffRight",
                                   "when": "editorTextFocus && isInDiffRightEditor && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+alt+z shift+,", "command": "gitlens.diffLineWithPrevious",
                                   "when": "editorTextFocus && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+alt+z shift+.", "command": "gitlens.diffWithWorking",
                                   "when": "editorTextFocus && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+alt+z w",       "command": "gitlens.diffLineWithWorking",
                                   "when": "editorTextFocus && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+alt+z [IntlBackslash]",       "command": "gitlens.diffLineWithPrevious",
                                                 "when": "editorTextFocus && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+alt+z shift+[IntlBackslash]", "command": "gitlens.diffWithWorking",
                                                 "when": "editorTextFocus && gitlens:activeFileStatus =~ /revision/" },
]
