# NB. At the time of writing (early 2024) some of these commands/options are
#     newer than the version of git provided by the Debian package manager.
#
#     sudo add-apt-repository ppa:git-core/ppa
#     suod apt update
#     sudo apt upgrade git

[user]
	name = Drew Pirrone-Brusse
	email = drew.pirrone.brusse@gmail.com

[alias]
	# Shortcuts, cuz' I'm lazy
	ci = commit
	br = branch
	lb = branch -vv --sort -committerdate        # List local branches, most recently edited first
	lba = branch -vv --sort -committerdate --all # List all   branches, most recently edited first
	# Consider removing; force myself to use switch/restore?
	co = checkout
	nb = switch -b                               # Create a new local branch iff that branch doesn't already exit
	nbf = switch -B                              # Create a new local branch even if that branch already exists
	tr = switch --track                          # Track an existing, remote branch
	cp = cherry-pick
	fwl = push --force-with-lease
	st = status --short
	sta = status --short --ignored --branch
	stat = show --stat

	# Difference between the stage and HEAD (rather than the working dir and HEAD)
	siff = diff --staged
	# Differences between words, rather than lines (take care, this can be slow)
	wiff = diff --word-diff

	# Add staged changes to HEAD, rather than staging
	# Somewhat dangerous; rewrites history
	amend = commit --amend --no-edit

	# Helpers to quickly interact with the stage and working tree
	unstage = reset HEAD
	us = unstage
	uncommit = reset --soft HEAD^

	# Rebase helpers
	rb = rebase
	rc = rebase --continue
	ra = rebase --abort

	# Branch Pruning;
	# - `git remote prune [remote]` will delete local references to branches on
	#   the given remote that have been deleted on the remote.
	#   `rpo` specifies `origin` as the remote.
	# - `git purge` will delete local branches that were set to track remote branches
	#   that have been deleted on the remote.
	# - `git rpop` combines the two, but only if it's "safe" to do so (see `branch -d`).
	# - `git fpop` combines the two, aggressively (see `branch -D`).
	rp = remote prune
	rpo = remote prune origin
	purgeable = ! git branch -vv | grep ': gone]' | grep -v \"*\" | awk '{ print $1 }'
	purge = ! git purgeable | xargs git branch -d
	fpurge = ! git purgeable | xargs git branch -D
	rpop = ! git rpo && git purge
	fpop = ! git rpo && git fpurge

	# The only way(s) to look at git logs.
	lg = log --graph --abbrev-commit --date=iso --decorate --format=format:'%C(yellow)%h%C(reset) %C(bold red)<%an>%C(reset) - %s %C(green)(%ad)%C(reset)%C(yellow)%d%C(reset)'
	lga = log --graph --all --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) %C(bold red)<%an>%C(reset) - %s %C(green)(%ad)%C(reset)%C(yellow)%d%C(reset)'
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) - %C(blue)%aD%C(reset) %C(green)(%ar)%C(reset)%C(yellow)%d%C(reset)%n''          %C(bold red)<%an>%C(reset) %s'
	lga2 = log --graph --all --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) - %C(blue)%aD%C(reset) %C(green)(%ar)%C(reset)%C(yellow)%d%C(reset)%n''          %C(bold red)<%an>%C(reset) %s'
	lg2s = log --name-status --graph --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) - %C(blue)%aD%C(reset) %C(green)(%ar)%C(reset)%C(yellow)%d%C(reset)%n''          %C(bold red)<%an>%C(reset) %s'
	lga2s = log --name-status --graph --all --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) - %C(blue)%aD%C(reset) %C(green)(%ar)%C(reset)%C(yellow)%d%C(reset)%n''          %C(bold red)<%an>%C(reset) %s'

	# VERY DANGEROUS; clears _all_ changes and untracked files in the given directory.
	# Can accept a path specify on, but that path is RELATIVE TO THE ROOT OF THE REPO, NOT `pwd`.
	flush = "!f() { git checkout -f $1 && git clean -xdf $1; }; f"

[color]
	ui = true

[push]
	# Change the default branch tracking behavior.
	# If you don't know what these configs do, I would advise _against_ using them.
	default = current
	autoSetupRemote = true

[fetch]
	# Make `fetch` behave as if `--prune` is always passed in.
	prune = true

[pull]
	# Don't initiate a merge or rebase when local has diverged from remote.
	ff = only

[diff]
	# `git diff` will use (i)ndex, (w)ork tree, (c)ommit,  and (o)bject
	# instead of a/b/c/d as prefixes for patches.
	mnemonicprefix = true

[core]
	editor = vim
	pager = less -F -X

[rerere]
	# https://git-scm.com/book/en/v2/Git-Tools-Rerere
	enabled = true
