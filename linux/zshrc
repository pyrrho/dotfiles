# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="mortalscumbag"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    aliases
    colored-man-pages
    copybuffer
    copyfile
    copypath
    ctrl-z-z
    emoji
    encode64
    forgit
    fzf
    genpass
    git
    git-lfs
    isodate
    npm
    nvm
    qrcode
    rust
    sudo
    taskwarrior
    zig-shell-completions
)
zstyle ':omz:plugins:nvm' lazy yes
ZOXIDE_CMD_OVERRIDE="cd"

# Turn forgit into a git extension s.t. oh-my-zsh alises don't clash
if [ -d "$ZSH/custom/plugins/forgit/bin" ] ; then
    export PATH="$PATH:$ZSH/custom/plugins/forgit/bin"
    export fpath=($ZSH/custom/plugins/forgit/completions $fpath)
fi

## Interesting plugins

### ZSH Extensions
# - aliases: `als` to show active aliases, `als --group` to show alias groups.
#       Python script. May be slow.
# - colored-man-pages: Adds the `colored` command to color output.
#       Shadows `man` w/ `colored man`.
# - emoji: Unicode emoji in the terminal.
# - per-directory-history: Like it says on the tin. Toggleable between dir and global with `Ctrl+G`.

### ZSH Prompt modifiers
# - git-prompt: Verbose terminal prompt for Git repository status.
#       Looks heavy-weight. Probably slow?
# - nodeenv: Add Node version information to the terminal prompt.

### Helper functions
# - copyfile: Adds `copyfile <file>` to copy the contents of a file to the system clipboard.
# - copypath: Adds `copypath [path]` to copy the given directory to the system clipboard.
# - encode64: Adds `e64`, `d64`, etc. to encode to or decode from base64.
# - genpass: Adds `genpass-*` to generate random passwords/passphrases.
# - qrcode: Adds `qrcode`, `qrsvg`; generate QR codes in a terminal.
#       Uses `curl https://qrcode.show/`.

### Keybindings
# - copybuffer: `Ctrl+O` to copy the current command buffer to the system clipboard.
# - ctrl-z-z: `Ctrl+Z` to background a process and `Ctrl+Z` to foreground it.
# - tehfuck: `Esc+Esc` to run `fuck`.
# - sudo: `Esc+Esc` to prepend `sudo` to the last run command.
# - man: `Esc + man` to prepend `man` before the last run command.

### Aliases and Completions
# - git: Aliases for Git.
# - git-lfs: Aliases for the Git Large File Storage extension.
# - isodate: Aliases for printing ISO 8601 formatted dates.
# - npm: Aliases and completions for `npm`.
# - tig: Aliases for tig.
# - dnote: Completions for `dnote`; terminal-based note taker.
# - gh: Completions for the GitHub CLI.
# - httpie: Completions for `http`; a modern terminal-based HTTP client.
# - rust: Completions for `rustc`, `rustup`, and `cargo` .
# - taskwarrior: Completions for TaskWarrior's `task`; terminal-based TODO list.
# - watson: Completions for `watson`; terminal-based time-tracking.

### Sourcing/Init'ing + Completions and Aliases
# - nvm: Sources `nvm` and adds completions.
#       Run with `zstyle ':omz:plugins:nvm' lazy yes` to speed up zsh startup.
#       Don't source "$NVM_DIR/nvm.sh" or "$NVM_DIR/bash_completion" when running.
# - zoxide: Initializes zoxide; the most recent autojump/z/v/fasd tool. (`z` but in Rust.)
#   - fzf: Completions and keybindings for `fzf`; fuzzy finder for the terminal.
#   - zsh-interactive-cd: `fzf` applied to `cd` tab completion.

### Custom plugins
# - zig-shell-completions: Completions for the `zig` CLI
#       https://github.com/ziglang/shell-completions
#       git clone https://github.com/ziglang/shell-completions $ZSH/custom/plugins/zig-shell-completions
# - forgit: A different interactive system for git
#       https://github.com/wfxr/forgit?tab=readme-ov-file
#       git clone https://github.com/wfxr/forgit.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/forgit

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


# # Add the dotnet-install.sh'd sdks to the PATH ...
# export PATH="$HOME/.dotnet:$HOME/.dotnet/tools:$PATH"
# # ... and define the DOTNET_ROOT path based on that binary.
# export DOTNET_ROOT=$(dirname $(which dotnet))

# # Set up pyenv
# export PYENV_ROOT="$HOME/.pyenv"
# export PATH="$PYENV_ROOT/bin:$PATH"
# eval "$(pyenv init --path)"

# # Set up NVM
# # But actually don't. Let the `nvm` plugin handle it.
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Set up rust
if [ -d "$HOME/.cargo/bin" ] ; then
    export PATH="$PATH:$HOME/.cargo/bin"

    # Rustc and Cargo use this environment variable to enable "nightly-like"
    # behavior on stable/beta compilers. Some people in the rust-lang project
    # get very grumpy if you use this escape hatch and pitch all kinds of ways
    # to make life harder for you.
    # See https://github.com/rust-lang/cargo/issues/7088 and linked issues.
    export RUSTC_BOOTSTRAP="1"

    # This lets you instruct cargo that it's running from a local compile, actually.
    # Same story as above, except for Cargo it's so it can force the channel in its
    # unit tests to confirm the "rules for thee but not for me" features work as
    # intended, blocking you from enabling unstable features which are nevertheless
    # shipped in the binaries you're running.
    export __CARGO_TEST_CHANNEL_OVERRIDE_DO_NOT_USE_THIS="dev"
fi

# Set up Golang
if [ -d "/usr/local/go" ]; then
    export PATH="$PATH:/usr/local/go/bin"
fi

# Set up Zig
if [ -d "$HOME/.zig" ]; then
    export PATH="$PATH:$HOME/.zig"
fi
# Add the vscode zls to PATH
# TODO: I can't remember why I have to do this...
if [ -d "${HOME}/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig_install" ]; then
    export PATH="${PATH}:${HOME}/Library/Application Support/Code/User/globalStorage/ziglang.vscode-zig/zig_install"
elif [ -d "${HOME}/.config/Code/User/globalStorage/ziglang.vscode-zig/zls_install" ]; then
    export PATH="${PATH}:${HOME}/.config/Code/User/globalStorage/ziglang.vscode-zig/zls_install"
fi

# Help Bevy and lldb play nice in VSCode.
# Without this explicit LD_LIBRARY_PATH, attempting to launch a sufficently
# complex Bevy application into an interactive debug session in VSCode results
# in lldb not being able to find Bevy's dynamic .so or even the Rust stdlib.
# It's TBD 1. why this is the case, and 2. what a "sufficiently complex" Bevy
# application is.
if command -v rustup >> /dev/null; then
    export LD_LIBRARY_PATH="$(rustup show home)/toolchains/$(rustup show active-toolchain | cut -d " " -f 1)/lib/"
fi

# Source my chirps and squawks
source ${HOME}/repos/dotfiles/common/chirp/source.sh

# Shortcut into the LI repo
alias 0="cd ${HOME}/li/__repo_worktrees/main"
# Add LI binaries to PATH
alias _src_li_dbg="export PATH=\"${PATH}:${HOME}/li/repo/target/debug\""
alias _src_li_rel="export PATH=\"${PATH}:${HOME}/li/repo/target/release\""

alias _ls_path="echo $PATH | tr ':' '\n'"

alias rf="rm -rf"
alias ll="ls -lAh"
alias la="ls -lah"
alias l1="ls -1"
alias cpr="cp -r"

alias xcc="xclip -r -selection clipboard"

function prg {
    ps aux | rg $@ | less -F -X
}

function hrg {
    history | rg $@ | less -F -X
}

function diffly {
    /usr/bin/diff -w -y $@ -W $(( $(tput cols) - 9 )) --color | colordiff | less -r -N --use-color
}

function unquote {
    sed "s/^\([\"']\)\(.*\)\1\$/\2/g"
}

function seg {
    awk '{ print $'"$1"' }'
}

alias py="python"
alias py2="python2"
alias py3="python3"
alias pypip="python -m pip"
alias py2pip="python2 -m pip"
alias py3pip="python3 -m pip"

alias pye="pyenv"

alias c="pyc"
function pyc {
    python3 -c "from math import *; print($*)"
}

function pp_epoch {
    python3 <<EOF
import time;
if len("$1") == 13:
    print(time.strftime("%Y/%m/%d %H:%M:%S.{} %Z".format($1%1000), time.gmtime($1/1000)))
else:
    print(time.strftime("%Y/%m/%d %H:%M:%S %Z", time.gmtime($1)))
EOF
}
function pp_local_epoch {
    python3 <<EOF
import time;
if len("$1") == 13:
    print(time.strftime("%Y/%m/%d %H:%M:%S.{} %Z".format($1%1000), time.localtime($1/1000)))
else:
    print(time.strftime("%Y/%m/%d %H:%M:%S %Z", time.localtime($1)))
EOF
}

# Git Worktrees
# but my way
#
# tl;dr - a few commands for making the `git worktree` command set more fun.
#
# - `gwl` -- `[g]it [w]orktree [l]ist`
#   List active worktrees
# - `gwt` -- `[g]it [w]orktree [t]ake`
#   Either `cd` to the worktree containing the given branch, or create a new
#   worktree for the given branch. If that branch exists. And then `cd` to it.
#   NB. Tab completion works with this command. I haven't figured out how to
#       group completions, but existing worktrees will be sorted before
#       unlinked branches that could be targeted for creation. And unlinked
#       branches will be sorted in order of most recently updated.
# - `gwrm` -- `[g]it [w]orktree [r]e[m]ove`
#   Delete the worktree containing the given branch.
#   NB. Tab completion works with this command.
#   NB. idk what happens if you try to delete the main worktree. Worth trying?
# - `gwrf` -- `[g]it [w]orktree [r]emove [f]orcefully`
#   Like `gwrm` but forceful
# - `gwnb` -- `[g]it [w]orktree [n]ew [b]ranch`
#   Create a new worktree containing a new branch
#
#
# A NOTE ON DIRECTORY LAYOUTS
# Because I never want to think about where my worktrees live, `gwt` can be used
# to either cd into existing worktrees, or to create new worktrees for existing
# branches. `gwnb` can be used to create a new branch and a new worktree at the
# same time. It would be better for that to be `gwt -b ...` but I didn't want to
# deal with cli options.
#
# Worktrees managed by these commands will be creted in sister directory of the
# main repository; `__<repo>_worktrees/<branch>`, where <repo> is the base
# directory of the main repository, and <branch> is the branch being linked. See
# A NOTE ON FINDING THE WORKTREE ROOT to see how to consistently find the
# worktree root.
#
#
# A NOTE ON FINDING THE WORKTREE ROOT
# Executing `git rev-parse --git-common-dir` returns one of two things;
# - When executed in the main worktree (a `git clone`d repo) it will return a
#   relative path to the .git directory of the current repository.
# - When executed in a linked worktree (a `git worktree add`d repo) it will
#   return an absolute path to the main worktree's .git directory.
#
# In either case, we can `realpath $(...)` the output of that commad to get an
# absolute path. Then we can nest a pair of `dirname` calls to strip the .git
# directory and the main worktree directory. And then we have a root.

# Unset git worktree ailases porvided by the ohmyzsh git plugin
unalias gwt
unalias gwta
unalias gwtls
unalias gwtmv
unalias gwtrm

# Functions!

function gwl {
    git rev-parse 2>& /dev/null
    if [ $? -ne 0 ]; then
        echo "ERROR: it looks like you're not in a git repo?"
        return $?
    fi
    git worktree list
}

alias gcd=gwt
function gwt {
    git rev-parse 2>& /dev/null
    if [ $? -ne 0 ]; then
        echo "ERROR: it looks like you're not in a git repo?"
        return $?
    fi
    if [ $# -ne 1 ]; then
        echo "ERROR: \`gwt\` requires exactuly 1 argument"
        return 1
    fi
    while read -r wt; do
        IFS=' ' read -r wt_path wt_sha wt_br <<< "${wt}"
        wt_br=$(echo ${wt_br} | tr -d '[]');
        if [ "$1" = "${wt_br}" ]; then
            cd ${wt_path}
            return
        fi
    done <<< $(git worktree list)
    wt_root=$(__gw_get_worktrees_root)
    git worktree add ${wt_root}/$1 $1
    if [ $? -eq 0 ]; then
        cd ${wt_root}/$1
    fi
}
function _gwt_completion {
    git rev-parse 2>& /dev/null
    if [ $? -ne 0 ]; then
        return $?
    fi

    local -a options

    worktree_branches=$(
        # List all active worktree branches
        git worktree list |
        # But only the short branchname
        xargs -I {} sh -c 'echo {} | awk "{print \$3}" | tr -d "[]"'
    )
    all_branches=$(
        git branch --sort -committerdate --all |
        # Stripping the worktree active in this dir
        rg -v '\*' |
        # Stripping other active worktrees
        rg -v '\+' |
        # Stripping alias'ing refs (e.g. `origin/HEAD`)
        rg -v " -> " |
        # Stripping e.g. remotes/origin/ s.t. we're left with just the branch names
        xargs -I {} sh -c "echo {} | perl -pe 's;remotes/\w+/;;'"
    )
    choices=$(
        # Cat the existing branches with all possible branches
        echo "${worktree_branches}\n${all_branches}" |
        # Listing unique entries while maintaining order (thanks S.O.)
        awk '!seen[$0]++'
    )

    options=($(echo ${choices}))
    _describe -1V 'arguments' options
}
compdef _gwt_completion gwt

function gwrm {
    git rev-parse 2>& /dev/null
    if [ $? -ne 0 ]; then
        echo "ERROR: it looks like you're not in a git repo?"
        return $?
    fi
    if [ $# -ne 1 ]; then
        echo "ERROR: \`gwrm\` requires exactuly 1 argument"
        return 1
    fi
    worktree_count=$(git worktree list | wc -l)
    if [ $worktree_count -eq 1 ]; then
        echo "ERROR: do you really want to delete the last active worktree?"
        return 1
    fi
    while read -r wt; do
        IFS=' ' read -r wt_path wt_sha wt_br <<< "${wt}"
        wt_br=$(echo ${wt_br} | tr -d '[]');
        if [ "$1" = "${wt_br}" ]; then
            # If we're within the worktree we're looking to remove, move to the
            # first worktree listed in `git worktree list` before doing the rm.
            if [[ "$(pwd)" == "${wt_root}/${wt_path}"* ]]; then
                cd $(git worktree list | head -1 | cut -d ' ' -f 1)
            fi
            git worktree remove ${wt_path}
            git br -D ${wt_br}

            return 0
        fi
    done <<< $(git worktree list)
}

function gwrf {
    git rev-parse 2>& /dev/null
    if [ $? -ne 0 ]; then
        echo "ERROR: it looks like you're not in a git repo?"
        return $?
    fi
    if [ $# -ne 1 ]; then
        echo "ERROR: \`gwrm\` requires exactuly 1 argument"
        return 1
    fi
    worktree_count=$(git worktree list | wc -l)
    if [ $worktree_count -eq 1 ]; then
        echo "ERROR: do you really want to delete the last active worktree?"
        return 1
    fi
    while read -r wt; do
        IFS=' ' read -r wt_path wt_sha wt_br <<< "${wt}"
        wt_br=$(echo ${wt_br} | tr -d '[]');
        if [ "$1" = "${wt_br}" ]; then
            # If we're within the worktree we're looking to remove, move to the
            # first worktree listed in `git worktree list` before doing the rm.
            if [[ "$(pwd)" == "${wt_root}"* ]]; then
                cd $(git worktree list | head -1 | cut -d ' ' -f 1)
            fi
            git worktree remove ${wt_path} --force
            git br -D ${wt_br}

            return 0
        fi
    done <<< $(git worktree list)
}
function _gwrm_completion {
    git rev-parse 2>& /dev/null
    if [ $? -ne 0 ]; then
        return $?
    fi

    local -a options
    options=($(git worktree list | xargs -I {} sh -c 'echo {} | awk "{print \$3}" | tr -d "[]"'))

    _describe -V 'arguments' options
}
compdef _gwrm_completion gwrm
compdef _gwrm_completion gwrf

function gwnb {
    git rev-parse 2>& /dev/null
    if [ $? -ne 0 ]; then
        echo "ERROR: it looks like you're not in a git repo?"
        return $?
    fi
    if [ $# -ne 1 ] && [ $# -ne 2 ]; then
        echo "ERROR: \`gwnb\` requires exactly 1 or 2 arguments"
        return 1
    fi

    wt_root=$(__gw_get_worktrees_root)
    git worktree add -b $1 ${wt_root}/$1 $2
    if [ $? -eq 0 ]; then
        cd ${wt_root}/$1
    fi
}

function __gw_get_worktrees_root {
    git rev-parse 2>& /dev/null
    if [ $? -ne 0 ]; then
        echo "ERROR: it looks like you're not in a git repo?"
        return $?
    fi

    main_repo_path=$(dirname $(realpath $(git rev-parse --git-common-dir)))
    repo_root_path=$(dirname ${main_repo_path})
    main_repo_name=$(basename ${main_repo_path})

    worktrees_path="${repo_root_path}/__${main_repo_name}_worktrees"

    if [ ! -d ${worktrees_path} ]; then
        mkdir -p ${worktrees_path}
    fi

    echo "${worktrees_path}"
}


# # List all branches, remote and otherwise
# all_branches=$(
#     git branch --sort -committerdate --all |
#     # Swapping '*' (the worktree in this dir) with '+' (active worktrees).
#     # Done to avoid expansion issues later.
#     tr '*' '+' |
#     # Stripping alias'ing refs (e.g. `origin/HEAD`)
#     rg -v " -> " |
#     # Stripping e.g. remotes/origin/ s.t. we're left with just the branch names
#     xargs -I {} sh -c "echo {} | perl -pe 's;remotes/\w+/;;'" |
#     # Listing unique entries while maintaining order (thanks S.O.)
#     awk '!seen[$0]++'
#     )
# # List all branches that currently have a worktree
# active_branches=$(echo $all_branches | rg "^\+" | tr -d '+ ')
# # Remove the latter from the former
# for b in $(echo $active_branches); do
#     all_branches=$(echo $all_branches | rg -v $b)
# done
